#!/bin/bash

main_css="${buildout:directory}/src/themes/zt/gen/css/main.less.css"

GROWL=$(which growlnotify)
CSS_CHANGE=0
JS_CHANGE=0

function error_handler()
{
    MYSELF="$0"     # equals to my script name
    LASTLINE="$1"   # argument 1: last line of error occurence
    LASTERR="$2"    # argument 2: error code of last command

    msg="$MYSELF: line $LASTLINE: exit status of last command: $LASTERR: $ERROR"
    echo $msg >&2
    [ -x "$GROWL" ] && $GROWL -a LessCompilerError -t "LessCompiler Error" -m "$msg" -p 1 -w &
    exit 1
}

function less_comp()
{
    trg=$2
    src=$1
    if [ ! -f "$trg" ] || [ $(stat -f "%m" "$src") -gt $(stat -f "%m" "$trg") ]
    then
        less_comp_force "$src" "$trg"
    fi
}

function less_comp_force()
{
    trg=$2
    src=$1
    CSS_CHANGE=1
    echo "writing $trg ..."
    ERROR=$( { "${buildout:directory}/bin/lessc" \
            "$src" "$trg"; } 2>&1 )
}

function yui_comp()
{
    trg=$2
    src=$1
    if [ ! -f "$trg" ] || [ $(stat -f "%m" "$src") -gt $(stat -f "%m" "$trg") ]
    then
        JS_CHANGE=1
        echo "writing $trg ..."
        ERROR=$( { JAVA_OPTS="-Xmx128m -Xms48m" java -jar "${yuicompressor:location}/build/yuicompressor-${defined-versions:yuicompressor}.jar" \
                 -v -o "$trg" "$src"; } 2>&1 ) &
    fi
}


# trap commands with non-zero exit code
trap 'error_handler $LINENO $?' ERR


# fast actions first
less_comp_force "${buildout:directory}/src/themes/zt/css/main.less" "$main_css"

[ "$CSS_CHANGE" == "1" ] && [ -x "$GROWL" ] && $GROWL -a LessCompiler -t Success -m "CSS files have been written" -w &
# dont exit here even though we could, cause there is also js that might need to get compressed


# expensive actions second
# css compression
yui_comp "$main_css" "${buildout:directory}/src/themes/zt/gen/css/m.min.css"

[ "$JS_CHANGE" == "1" ] && [ -x "$GROWL" ] && $GROWL -a LessCompiler -t Success -m "CSS/JS compression started (detached)" -w &
